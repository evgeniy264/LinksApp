@model LinksApp.Models.Link

@{
	Guid? linkTextGuid = TempData["LinkTextGuid"] != null ? (Guid?)TempData["LinkTextGuid"] : null;
	Guid? linkFileGuid = TempData["LinkFileGuid"] != null ? (Guid?)TempData["LinkFileGuid"] : null;
}

<div id="loadedContent">
	@if (linkTextGuid != null)
	{
		<p>
			<h3>
				<label class="label label-default">Ссылка на текст:</label><br />
			</h3>
			<a id="linkTextGuid" href="link/@linkTextGuid">https://localhost/link/@linkTextGuid</a> <button id="textButton" class="copy-button">Скопировать</button>
		</p>
	}
	@if (linkFileGuid != null)
	{
		<p>
			<h3>
				<label class="label label-default">Ссылка на файл:</label><br />
			</h3>
			<a id="linkFileGuid" href="link/@linkFileGuid">https://localhost/link/@linkFileGuid</a> <button id="fileButton" class="copy-button">Скопировать</button>
		</p>
	}
</div>

<script type="text/javascript">
	const targetText = document.getElementById("linkTextGuid");
	const buttonText = document.getElementById("textButton");
	const targetFile = document.getElementById("linkFileGuid");
	const buttonFile = document.getElementById("fileButton");
	if(buttonText){
		buttonText.addEventListener(`click`, async (e) => {
			e.preventDefault();
			await navigator.clipboard.writeText(targetText.innerText)
		});
	}
	if(buttonFile){
		buttonFile.addEventListener(`click`, async (e) => {
			e.preventDefault();
			await navigator.clipboard.writeText(targetFile.innerText)
		});
	}
</script>


